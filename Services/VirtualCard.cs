using AutoMapper;
using Embily.Gateways;
using Embily.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Embily.Services
{
    public class VirtualCard : ICardLoad, ICard
    {
        private class TransactionHistoryProfile : Profile
        {
            public TransactionHistoryProfile()
            {
                CreateMap<Transaction, TransactionInfo>()
                    .ForMember(dest => dest.TransactionDate, opts => opts.MapFrom(src => src.DateCreated))
                    .ForMember(dest => dest.TransactionCode, opts => opts.MapFrom(src => src.TxnCode.ToString()))
                    .ForMember(dest => dest.Description, opts => opts.MapFrom(src => $"Card load"))
                    .ForMember(dest => dest.TransactionAmount, opts => opts.MapFrom(src => src.DestinationAmount))
                    .ForMember(dest => dest.BillingAmount, opts => opts.MapFrom(src => src.DestinationAmount))
                    .ForMember(dest => dest.BillingCurrencyCode, opts => opts.MapFrom(src => src.DestinationCurrencyCode.ToString()))
                    ;
            }
        }

        private readonly EmbilyDbContext _ctx;
        private readonly IRefGen _refGen;
        private readonly IMapper _mapper;

        public VirtualCard(EmbilyDbContext ctx, IRefGen refGen, IMapper mapper)
        {
            _ctx = ctx;
            _refGen = refGen;
            _mapper = mapper;
        }

        public async Task<double> GetCardBalanceAsync(string providerUserId, string providerAccountNumber)
        {
            return await Task.Run<double>(() =>
            {
                Account account = _ctx.Accounts.SingleOrDefault(
                    a => a.ProviderName == AccountProviders.Virtual
                    && a.ProviderUserId == providerUserId
                    && a.ProviderAccountNumber == providerAccountNumber);

                return account.Balance;
            });
        }

        public async Task<IList<TransactionInfo>> GetTransactionsAsync(string providerUserId, string providerAccountNumber)
        {
            return await Task.Run(() =>
            {
                Account account = _ctx.Accounts.SingleOrDefault(
                    a => a.ProviderName == AccountProviders.Virtual
                    && a.ProviderUserId == providerUserId
                    && a.ProviderAccountNumber == providerAccountNumber);

                var transactions = _ctx.Transactions.Where(t => t.AccountId == account.AccountId && t.TxnCode == TxnCodes.VIRTUALCARD_LOAD);

                return _mapper.Map<IList<TransactionInfo>>(transactions);
            });                
        }

        public async Task LoadCardAsync(string providerUserId, string providerAccountNumber, double amount, string transactionNumber)
        {
            Transaction txn = await _ctx.Transactions.Include(t => t.Account).SingleAsync(t => t.TransactionNumber == transactionNumber);
            await CreateTransaction(txn.Account, amount, TxnCodes.VIRTUALCARD_LOAD, txn.TxnGroupRef, TxnTypes.CREDIT);
            txn.Account.Balance += amount;
            await _ctx.SaveChangesAsync();
        }

        async Task<Transaction> CreateTransaction(Account account, double amount, TxnCodes code, string txnGroupRef, TxnTypes type = TxnTypes.DEBIT, TxnStatus status = TxnStatus.Complete)
        {
            var transaction = new Transaction
            {
                TransactionId = Guid.NewGuid().ToString(),
                //TransactionNumber = // generated by the database via a sequence 
                TxnGroupRef = txnGroupRef,
                CryptoProvider = CryptoProviders.None,
                CryptoAddress = "",
                TxnType = type,
                TxnCode = code,
                OriginalCurrencyCode = CurrencyCodes.NONE,
                OriginalAmount = 0,
                DestinationCurrencyCode = account.CurrencyCode,
                DestinationAmount = amount,
                IsAmountKnown = true,
                Status = status,
                AccountId = account.AccountId,
            };

            await _ctx.Transactions.AddAsync(transaction);
            await _ctx.SaveChangesAsync();

            long num = Convert.ToInt64(transaction.TransactionNumber);
            transaction.Reference = _refGen.GenTxnRef(num);
            await _ctx.SaveChangesAsync();

            return transaction;
        }
    }
}
